import pytest

class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def calculate_perimeter(self):
        if (self.a <= 0
            or self.b <= 0
            or self.c <= 0
            ):
            return 0
        else:
            soma = (self.a
                    + self.b
                    + self.c
                    )
            return soma

    def triangle_type_side(self):
        if (self.a <= 0
            or self.b <= 0
            or self.c <= 0
            ):
            return 0
        else:
            if (self.a == self.b and self.b == self.c):
                return "equilateral"
            elif (self.a != self.b and self.a != self.c and self.b != self.c):
                return "scalene"
            else:
                return "isosceles"

    def rectangle_triangle(self):
        sides = [self.a, self.b, self.c]
        sides.sort()
        if (sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2):
            return True
        else:
            return False

    def triangle_similarity(self, triangle):
        if (self.a <= 0
            or self.b <= 0
            or self.c <= 0
            ):
            return False
        else:
            thisTriangle = [self.a, self.b, self.c]
            thisTriangle.sort()
            otherTriangle = [triangle.a, triangle.b, triangle.c]
            otherTriangle.sort()
            ratio_list = []
            
            for i in range(3):
                ratio = thisTriangle[i] / otherTriangle[i]
                ratio_list.append(ratio)
                
            if (ratio_list[0] == ratio_list[1] and ratio_list[1] == ratio_list[2]):
                return True
            else:
                return False


class TestTriangle:
    @pytest.fixture
    def t1 (self,t1_a, t1_b, t1_c):
        return Triangle(t1_a, t1_b, t1_c)
    
    @pytest.fixture
    def t2 (self,t2_a, t2_b, t2_c):
        return Triangle(t2_a, t2_b, t2_c)
    
    @pytest.mark.parametrize("t1_a, t1_b, t1_c, exp_per", [
        (1, 1, 1, 3),
        (2, 5, 10, 17),
        (52, 98, 110, 260),
        (1000, 1000, 10000, 12000),
        (0, 10, 20, 0),
        (10, 0, 20, 0),
        (20, 10, 0, 0),
        (-20, 15, 5, 0),
        (2, -5, 8, 0),
        (1, 12, -1, 0),
        ])
        
    def test_calculate_perimeter(self, t1, exp_per):
        assert t1.calculate_perimeter() == exp_per

    @pytest.mark.parametrize("t1_a, t1_b, t1_c, exp_tip", [
        (1, 1, 1, "equilateral"),
        (2, 5, 10, "scalene"),
        (52, 98, 110, "scalene"),
        (1000, 1000, 10000, "isosceles"),
        (0, 10, 20, 0),
        (10, 0, 20, 0),
        (20, 10, 0, 0),
        (-20, 15, 5, 0),
        (2, -5, 8, 0),
        (1, 12, -1, 0),
        ])

    def test_triangle_type_side(self, t1, exp_tip):
        assert t1.triangle_type_side() == exp_tip

    @pytest.mark.parametrize("t1_a, t1_b, t1_c, exp_rec", [
        (1, 1, 1, False),
        (2, 5, 10, False),
        (3, 4, 5, True),
        (6, 10, 8, True),
        (0, 10, 20, False),
        (10, 0, 20, False),
        (20, 10, 0, False),
        (-20, 15, 5, False),
        (2, -5, 8, False),
        (1, 12, -1, False),
        ])

    def test_rectangle_triangle(self, t1, exp_rec):
        assert t1.rectangle_triangle() == exp_rec

    @pytest.mark.parametrize("t1_a, t1_b, t1_c, t2_a, t2_b, t2_c, exp_sim", [
        (1, 1, 1, 2, 2, 2, True),
        (1, 2, 3, 2, 4, 6, True),
        (8, 4, 3, 16, 8, 6, True),
        (2, 5, 8, 11, 12, 87, False),
        (0, 10, 20, 0, 20, 40, False),
        (10, 0, 20, 10, 0, 23, False),
        (20, 10, 0, 20, 10, 0, False),
        (-20, 15, 5, -40, 30, 10, False),
        (2, -5, 8, 4, -10, 16, False),
        (1, 12, -1, 2, 24, -2, False),
        ])
    
    def test_triangle_similarity(self, t1, t2, exp_sim):
        assert t1.triangle_similarity(t2) == exp_sim
